<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fangminglee.github.io</id>
    <title>Gridea</title>
    <updated>2020-03-21T08:44:34.030Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fangminglee.github.io"/>
    <link rel="self" href="https://fangminglee.github.io/atom.xml"/>
    <subtitle>学习笔记</subtitle>
    <logo>https://fangminglee.github.io/images/avatar.png</logo>
    <icon>https://fangminglee.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Electron桌面应用打包流程]]></title>
        <id>https://fangminglee.github.io/post/electron-zhuo-mian-ying-yong-da-bao-liu-cheng</id>
        <link href="https://fangminglee.github.io/post/electron-zhuo-mian-ying-yong-da-bao-liu-cheng">
        </link>
        <updated>2020-03-21T07:51:55.000Z</updated>
        <content type="html"><![CDATA[<p>一. 准备工作</p>
<pre><code>1.npm的安装需要下载node.js,安装完node.js之后npm自然会有。

   参考链接：http://www.runoob.com/nodejs/nodejs-install-setup.html

2.Electron环境搭建
   a、安装node.js。node官网地址：https://nodejs.org/en/

   b、在windows 命令行下检查node是否安装成功。分别输入 node -v，  npm -v 。如果出现 node 和 npm 的版本号，则转下一步。否则转第一步。

   c、在命令行，下载淘宝镜像命令工具 cnpm。

        npm install cnpm -g --registry=http://registry.npm.taobao.org

   d、用 cnpm 命令安装 electron。

        cnpm install electron -g

3. 首先，我们要安装electron-prebuilt，它是一个npm模块，因此我们可以使用Npm来进行安装，它是一个electron的预编译版本。

npm install -g electron-prebuilt    
4. 接下来安装electron-packager ，它也是一个npm模块，是一个用于打包electron应用的工具

npm install -g electron-packager
</code></pre>
<p>二. 创建一个应用</p>
<pre><code>创建一个electron应用。我们现在仅仅需要3个文件。 

    index.html 
    main.js 
    package.json

index.html使我们想要显示的页面，main.js为此应用的入口，package.json为npm项目的配置文件。

1.新建一个名为myApp的文件夹

2.进入项目目录进行初始化 

cd myApp
npm init
3.新建一个package.json，内容如下：

{
  &quot;name&quot;: &quot;zzh&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;description&quot;: &quot;a simple application&quot;,
  &quot;main&quot;: &quot;main.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
    &quot;start&quot;: &quot;electron .&quot;
  },
  &quot;author&quot;: &quot;zzh&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
4.新建一个index.html, 内容如下：

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;hello electron&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
5. 新建一个main.js, 内容如下：（main.js的文件名对应package.json中main的值）

const {app, BrowserWindow} = require('electron');
let win;
let windowConfig = {
    width:800,
    height:600
};
function createWindow(){
    win = new BrowserWindow(windowConfig);
    win.loadURL(`file://${__dirname}/index.html`);
    //开启调试工具
    win.webContents.openDevTools();
    win.on('close',() =&gt; {
    //回收BrowserWindow对象
    win = null;
    });
    win.on('resize',() =&gt; {
        win.reload();
    })
} 
app.on('ready',createWindow);
app.on('window-all-closed',() =&gt; {
app.quit();
});



app.on('activate',() =&gt; {
    if(win == null){
        createWindow();
    }
})
</code></pre>
<p>关于浏览器BrowserWindow模块更多的参数设置可以查看官方文档https://www.w3cschool.cn/electronmanual/electronmanual-browser-window.html</p>
<p>三. 运行</p>
<p>现在只要在myApp目录下执行npm start 就可以运行了</p>
<pre><code>npm start
</code></pre>
<p>因为我们在main.js中写了win.webContents.openDevTools(); 开启了浏览器调试工具，所以我们打开的界面是这样的：<br>
<img src="https://fangminglee.github.io/post-images/1584777317139.png" alt="" loading="lazy"></p>
<p>四. 打包</p>
<p>现在整个过程进行到最后一步，我们需要打包我们自己的应用，那么如何打包，这就需要用到我们先前已经安装的electron-packager</p>
<p>打开命令行我们可以这样使用它：</p>
<pre><code>electron-packager . HelloWorld --win --out ../HelloWorldApp --arch=x64 --version=0.0.1
</code></pre>
<p>大概格式是这样的：</p>
<pre><code>electron-packager &lt;应用目录&gt; &lt;应用名称&gt; &lt;打包平台&gt; --out &lt;输出目录&gt; &lt;架构&gt; &lt;应用版本&gt;
</code></pre>
<p>但是这样并不够，会提示：</p>
<pre><code>Unable to determine Electron version. Please specify an Electron version
</code></pre>
<p>我们需要指明Electronversion。这个参数是当前安装Electron的版本，不知道的可以直接electron就能看到了，我这里是1.4.13，经过改进后如下：</p>
<pre><code>electron-packager . HelloWorld --win --out ../HelloWorldApp --arch=x64 --version=0.0.1 --electron-version=1.4.13
</code></pre>
<p>执行完毕后，看到父级目录下已经产生了我们希望看到的应用文件夹。里面的应用程序HelloWorld.exe就可以直接打开桌面应用了。</p>
<figure data-type="image" tabindex="1"><img src="https://fangminglee.github.io/post-images/1584777436716.png" alt="" loading="lazy"></figure>
<p>但是每次打包的执行命令太长太麻烦了，所以我们可以把命令写进package.json中，执行命令调用它就好了。</p>
<p>更改后的package.json如下：</p>
<pre><code>{
  &quot;name&quot;: &quot;zzh&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;description&quot;: &quot;a simple application&quot;,
  &quot;main&quot;: &quot;main.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
    &quot;start&quot;: &quot;electron .&quot;,
   &quot;package&quot;: &quot;electron-packager . HelloWorld --win --out ../HelloWorldApp --arch=x64 --version=1.0.0 --electron-version=1.4.13&quot;
  },
  &quot;author&quot;: &quot;zzh&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
</code></pre>
<p>这样我们每次打包只需要执行 npm run-script package就可以了。</p>
<pre><code>npm run-script package
</code></pre>
<p>五. 更改图标</p>
<pre><code>如果我们想要更改窗口左上角的图标和任务栏的图标，只需要在打包的命令上加个icon参数就好了

electron-packager . HelloWorld --win --out ../HelloWorldApp --arch=x64 --version=1.0.0 --electron-version=1.4.13 --icon=./app/img/icon.ico
</code></pre>
<p>六. NSIS 打包 Electron 生成exe安装包</p>
<p>NSIS操作简单，而且打包出来的安装包，安装过程和卸载过程都更加正规。推荐使用</p>
<p>一. 准备</p>
<pre><code>1.下载NSIS软件，安装

    NSIS中文版下载地址：https://pan.baidu.com/s/1mitSQU0

2.安装asar (参考官方文档https://www.w3cschool.cn/electronmanual/cexo1qkn.html)

npm install -g asar
</code></pre>
<p>二. 打包</p>
<pre><code>1.在我们electron最初的目录myApp下执行下面命令，生成asar包

asar pack ./index.html app.asar
</code></pre>
<p>得到app.asar包</p>
<figure data-type="image" tabindex="2"><img src="https://fangminglee.github.io/post-images/1584777492799.png" alt="" loading="lazy"></figure>
<pre><code>2.将app.asar放到文章开始图片得到目录下的resources文件夹下
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777531024.png" alt="" loading="lazy"></p>
<pre><code>3.打开NSIS

1）选择可视化脚本编辑器
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://fangminglee.github.io/post-images/1584777566267.png" alt="" loading="lazy"></figure>
<pre><code>2）选择使用脚本向导创建新的脚本文件，确定
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777605869.png" alt="" loading="lazy"></p>
<pre><code>3）下一步
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://fangminglee.github.io/post-images/1584777624754.png" alt="" loading="lazy"></figure>
<pre><code>4）设置应用名称，版本号，网址，标志随便自定义一个就好，然后下一步
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777645369.png" alt="" loading="lazy"></p>
<pre><code>5）设置安装程序图标(图标必须是ico格式)，名称，语言（SimpChinese），界面，然后下一步
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777664913.png" alt="" loading="lazy"></p>
<pre><code>6）默认，直接下一步就好
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777682213.png" alt="" loading="lazy"></p>
<pre><code>7）授权文件有就填，没有就填空白   然后下一步
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777699545.png" alt="" loading="lazy"></p>
<pre><code>8）添加应用程序文件，默认两个文件选中，删除
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777717726.png" alt="" loading="lazy"></p>
<pre><code>9）点击添加文件
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777734447.png" alt="" loading="lazy"></p>
<pre><code>添加HelloWorld.exe文件，确定
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777748449.png" alt="" loading="lazy"></p>
<pre><code>10）点击AddDirTree 
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777765002.png" alt="" loading="lazy"></p>
<pre><code>选择HelloWorld-win32-x64文件夹，选中包含子目录，确定，然后下一步
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777785721.png" alt="" loading="lazy"></p>
<pre><code>11）可修改开始菜单名称，然后下一步
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777801851.png" alt="" loading="lazy"></p>
<pre><code>12）可设置安装成功后启动的程序，默认就是我们打包后的启动程序，下一步
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777822433.png" alt="" loading="lazy"></p>
<pre><code>13）设置一些卸载时界面的提示信息，然后下一步
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777836310.png" alt="" loading="lazy"></p>
<pre><code>14）保存我们的脚本，完成，保存到桌面
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777858181.png" alt="" loading="lazy"></p>
<pre><code>    15）打开脚本文件，编译及运行
</code></pre>
<p>​           <img src="https://fangminglee.github.io/post-images/1584777878254.png" alt="" loading="lazy"></p>
<pre><code>16）开始编译，请等待
</code></pre>
<p>​    <img src="https://fangminglee.github.io/post-images/1584777893160.png" alt="" loading="lazy"></p>
<pre><code>17）编译完就可以安装啦

![](https://fangminglee.github.io/post-images/1584777929728.png)
</code></pre>
<p>完成！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[手把手教你使用Electron5+vue-cli3开发跨平台桌面应用]]></title>
        <id>https://fangminglee.github.io/post/shou-ba-shou-jiao-ni-shi-yong-electron5vue-cli3-kai-fa-kua-ping-tai-zhuo-mian-ying-yong</id>
        <link href="https://fangminglee.github.io/post/shou-ba-shou-jiao-ni-shi-yong-electron5vue-cli3-kai-fa-kua-ping-tai-zhuo-mian-ying-yong">
        </link>
        <updated>2020-03-21T06:08:57.000Z</updated>
        <content type="html"><![CDATA[<p>Electron是一个基于Chromium和 Node.js，可以使用 HTML、CSS和JavaScript构建跨平台应用的技术框架，兼容 Mac、Windows 和 Linux。虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求。受限于浏览器的沙盒限制，网页应用无法满足某些场景下的使用需求，而桌面应用可以读写本地文件、调用更多系统资源，再加上Web开发的低成本、高效率的优势，这种方式越来越受到开发者的喜爱。</p>
<p>本文一步一步教你如何使用Electron5和vue-cli3，在完全保留vue开发web应用的习惯下，搭建桌面应用。</p>
<p>本文不涉及Electron和vue的开发教程，仅以实现两者结合为目的，如深入学习Electron和vue，请访问官方：</p>
<p>Electron: <a href="https://electronjs.org/">electronjs.org/</a></p>
<p>vue: <a href="https://cn.vuejs.org/">cn.vuejs.org/</a></p>
<p>vue-cli: <a href="https://cli.vuejs.org/zh/">cli.vuejs.org/zh/</a></p>
<p>stylus: <a href="http://stylus-lang.com/">stylus-lang.com/</a></p>
<p>学习本文前，你需要提前掌握以下技能：</p>
<blockquote>
<ol>
<li>HTML、CSS、JavaScript</li>
<li>vue2.x</li>
<li>Stylus</li>
</ol>
</blockquote>
<blockquote>
<p>※注：本文代码区域每行开头的“+”表示新增，“-”表示删除，“M”表示修改；代码中的“...”表示省略。</p>
</blockquote>
<h2 id="1-创建项目">1 创建项目</h2>
<h3 id="11-使用cnpm加速下载">1.1 使用cnpm加速下载</h3>
<p>npm有时下载速度很慢，可以安装cnpm，从国内淘宝镜像下载，执行以下命令：</p>
<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org
复制代码
</code></pre>
<p>以后npm直接替换成cnpm使用。</p>
<h3 id="12-为什么不使用simulatedgregelectron-vue">1.2 为什么不使用SimulatedGREG/electron-vue</h3>
<p>SimulatedGREG/electron-vue已经很久没有更新了，而且其生成的工程结构并不是vue-cli3。所以放弃使用。</p>
<h3 id="13-安装升级vue-cli3">1.3 安装/升级vue-cli3</h3>
<p>先执行以下命令，确认下本地安装的vue-cli版本：</p>
<pre><code>vue -V
复制代码
</code></pre>
<p>在写本文时，我使用的是3.8.4版本。</p>
<p>如果本地使用的是vue-cli2.x或者更早版本，可先卸载：</p>
<pre><code>cnpm uninstall vue-cli -g
复制代码
</code></pre>
<blockquote>
<p>※注：vue-cli3使用了新的npm包名，与旧版本不一样。</p>
</blockquote>
<p>如果还没有安装vue-cli3，先执行以下命令安装：</p>
<pre><code>cnpm install @vue/cli -g
复制代码
</code></pre>
<p>如果你已安装vue-cli3，但不是最新版本，可执行以下命令升级：</p>
<p>（我这里使用cnpm并没有完成升级，所以使用了npm）</p>
<pre><code>npm update @vue/cli -g
复制代码
</code></pre>
<h3 id="14-创建vue项目">1.4 创建vue项目</h3>
<p>找个喜欢的目录，执行以下命令，创建vue项目：</p>
<p>（这里把项目名称定为electron-vue-demo）</p>
<pre><code>vue create electron-vue-demo
复制代码
</code></pre>
<p>会出现以下选项（如果熟悉此步骤可跳过本节内容）：</p>
<pre><code>Vue CLI v3.8.4
? Please pick a preset: (Use arrow keys)
  default (babel, eslint) 
&gt; Manually select features 
复制代码
</code></pre>
<p>选择“Manually select features” (自定义安装)。</p>
<hr>
<pre><code>? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to t
oggle all, &lt;i&gt; to invert selection)
❯◉ Babel
 ◯ TypeScript
 ◯ Progressive Web App (PWA) Support
 ◉ Router
 ◉ Vuex
 ◉ CSS Pre-processors
 ◉ Linter / Formatter
 ◯ Unit Testing
 ◯ E2E Testing
复制代码
</code></pre>
<p>这里选择了常用的模块，请根据实际需求进行选择。</p>
<hr>
<pre><code>? Use history mode for router? (Requires proper server setup for index fallback 
in production) (Y/n)  n
复制代码
</code></pre>
<p>如果选择了router，这里会询问是否使用history模式。</p>
<p>vue-router 默认使用hash模式（即通过url#hash来跳转页面），使用URL的hash来模拟一个完整的 URL，当URL改变时，页面不会重新加载。 如果使用history，URL就像正常的url，例如 <a href="http://yoursite.com/user/id">yoursite.com/user/id</a> ，比较好看。但是还需要后台配置支持。</p>
<p>这里我们选择“n”。</p>
<hr>
<pre><code>? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported 
by default): (Use arrow keys)
  Sass/SCSS (with dart-sass) 
  Sass/SCSS (with node-sass) 
  Less 
❯ Stylus 
复制代码
</code></pre>
<p>选择CSS预处理模块，这里我们使用“Stylus”。</p>
<hr>
<pre><code>? Pick a linter / formatter config: (Use arrow keys)
  ESLint with error prevention only 
  ESLint + Airbnb config 
❯ ESLint + Standard config 
  ESLint + Prettier 
复制代码
</code></pre>
<p>选择ESLint代码格式检查工具的配置，选择“ESLint + Standard config”，标准配置。</p>
<hr>
<pre><code>? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i
&gt; to invert selection)
❯◉ Lint on save
 ◯ Lint and fix on commit
复制代码
</code></pre>
<p>Line on save表示在保存代码的时候，进行格式检查。</p>
<p>Lint and fix on commit表示在git commit的时候自动纠正格式。</p>
<p>这里只选择“Lint on save”。</p>
<hr>
<pre><code>? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? 
  In dedicated config files 
❯ In package.json 
复制代码
</code></pre>
<p>这里问把 babel, postcss, eslint 这些配置文件放哪？</p>
<p>In dedicated config files 表示独立文件</p>
<p>In package.json 表示放在package.json里</p>
<p>这里选择“In package.json”。</p>
<hr>
<pre><code>? Save this as a preset for future projects? (y/N) N
复制代码
</code></pre>
<p>是否为以后的项目保留这些设置？选择“N”。</p>
<p>然后耐心等待项目安装完成。</p>
<h3 id="15-自动安装electron">1.5 自动安装electron</h3>
<blockquote>
<p>※注：此过程可能需要科学上网，由于直接从国外镜像下载较慢，可能需要等待很漫长的时间。如果你对自己的网速没有超强自信，请跳过本节，前往1.6小节手动安装。</p>
</blockquote>
<p>进入到项目根目录，执行：</p>
<pre><code>vue add electron-builder
复制代码
</code></pre>
<p>在安装过程中，很可能会卡在这一步不动了：</p>
<pre><code>node ./download-chromedriver.js
复制代码
</code></pre>
<p>没关系，我们先强制结束掉。再执行一次vue add electron-builder，然后就可以顺利通过了。</p>
<p>接下来出现配置选项：</p>
<pre><code>? Choose Electron Version (Use arrow keys)
  ^3.0.0 
  ^4.0.0 
❯ ^5.0.0
复制代码
</code></pre>
<p>选择Electron版本。选择 “^5.0.0”。</p>
<p>然后耐心等待安装完成。如果中间出现错误中断了，请重复此步骤。</p>
<p>安装完成后会自动在src目录下生成background.js并修改了package.json。</p>
<blockquote>
<p>※注：由于网络原因，如果中间出现过中断失败，再次重新安装可能会很快完成，但实际上electron可能并未安装完全。建议完成以上步骤后，直接删除项目根目录的node_modules/，并且执行cnpm install，从国内镜像重新安装所有依赖包。</p>
</blockquote>
<h3 id="16-手动安装electron">1.6 手动安装electron</h3>
<blockquote>
<p>※注：如果已经通过1.5章节的操作，请直接跳过本小节。</p>
</blockquote>
<h4 id="修改packagejson添加以下7行">修改package.json，添加以下7行：</h4>
<pre><code>  ...
  &quot;scripts&quot;: {
    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,
    &quot;build&quot;: &quot;vue-cli-service build&quot;,
    &quot;lint&quot;: &quot;vue-cli-service lint&quot;,
+   &quot;electron:build&quot;: &quot;vue-cli-service electron:build&quot;,
+   &quot;electron:serve&quot;: &quot;vue-cli-service electron:serve&quot;,
+   &quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;,
+   &quot;postuninstall&quot;: &quot;electron-builder install-app-deps&quot;
  },
+ &quot;main&quot;: &quot;background.js&quot;,
  &quot;dependencies&quot;: {
    &quot;core-js&quot;: &quot;^2.6.5&quot;,
    &quot;vue&quot;: &quot;^2.6.6&quot;,
    &quot;vue-router&quot;: &quot;^3.0.1&quot;,
    &quot;vuex&quot;: &quot;^3.0.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@vue/cli-plugin-babel&quot;: &quot;^3.8.0&quot;,
    &quot;@vue/cli-plugin-eslint&quot;: &quot;^3.8.0&quot;,
    &quot;@vue/cli-service&quot;: &quot;^3.8.0&quot;,
    &quot;@vue/eslint-config-standard&quot;: &quot;^4.0.0&quot;,
    &quot;babel-eslint&quot;: &quot;^10.0.1&quot;,
+   &quot;electron&quot;: &quot;^5.0.6&quot;,
    &quot;eslint&quot;: &quot;^5.16.0&quot;,
    &quot;eslint-plugin-vue&quot;: &quot;^5.0.0&quot;,
    &quot;stylus&quot;: &quot;^0.54.5&quot;,
    &quot;stylus-loader&quot;: &quot;^3.0.2&quot;,
+   &quot;vue-cli-plugin-electron-builder&quot;: &quot;^1.3.5&quot;,
    &quot;vue-template-compiler&quot;: &quot;^2.6.10&quot;
  },
  ...    
复制代码
</code></pre>
<h4 id="新建srcbackgroundjs">新建src/background.js</h4>
<p>在src目录下新建background.js，复制以下代码：</p>
<pre><code>'use strict'

import { app, protocol, BrowserWindow } from 'electron'
import {
  createProtocol,
  installVueDevtools
} from 'vue-cli-plugin-electron-builder/lib'

const isDevelopment = process.env.NODE_ENV !== 'production'

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let win

// Scheme must be registered before the app is ready
protocol.registerSchemesAsPrivileged([{
  scheme: 'app',
  privileges: {
    secure: true,
    standard: true
  }
}])

function createWindow () {
  // Create the browser window.
  win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true
    }
  })

  if (process.env.WEBPACK_DEV_SERVER_URL) {
    // Load the url of the dev server if in development mode
    win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)
    if (!process.env.IS_TEST) win.webContents.openDevTools()
  } else {
    createProtocol('app')
    // Load the index.html when not in development
    win.loadURL('app://./index.html')
  }

  win.on('closed', () =&gt; {
    win = null
  })
}

// Quit when all windows are closed.
app.on('window-all-closed', () =&gt; {
  // On macOS it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () =&gt; {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (win === null) {
    createWindow()
  }
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () =&gt; {
  if (isDevelopment &amp;&amp; !process.env.IS_TEST) {
    // Install Vue Devtools
    try {
      await installVueDevtools()
    } catch (e) {
      console.error('Vue Devtools failed to install:', e.toString())
    }
  }
  createWindow()
})

// Exit cleanly on request from parent process in development mode.
if (isDevelopment) {
  if (process.platform === 'win32') {
    process.on('message', data =&gt; {
      if (data === 'graceful-exit') {
        app.quit()
      }
    })
  } else {
    process.on('SIGTERM', () =&gt; {
      app.quit()
    })
  }
}
复制代码
</code></pre>
<p>以上代码是1.5小节使用自动化方式安装后生成的。</p>
<h4 id="安装依赖包">安装依赖包</h4>
<p>在项目根目录执行，安装全部依赖包：</p>
<pre><code>cnpm install
复制代码
</code></pre>
<p>如果安装过程中报错：Error: post install error, please remove node_modules before retry!可以忽略，不影响后续使用。</p>
<h3 id="17-编译并启动app">1.7 编译并启动APP</h3>
<p>执行以下命令，开始编译APP，并启动开发环境APP：</p>
<pre><code>npm run electron:serve
复制代码
</code></pre>
<p>首次启动可能会等待很久，出现以下信息：</p>
<pre><code>INFO  Launching Electron...
Failed to fetch extension, trying 4 more times
Failed to fetch extension, trying 3 more times
Failed to fetch extension, trying 2 more times
...
复制代码
</code></pre>
<p>这是因为在请求安装vuejs devtools插件。需要科学上网才能安装成功。如果不能科学上网也没关系，耐心等待5次请求失败后会自动跳过。</p>
<p>编译成功后，就会出现开发环境的APP了。</p>
<figure data-type="image" tabindex="1"><img src="https://fangminglee.github.io/post-images/1584775085003.webp" alt="" loading="lazy"></figure>
<p>( ↑ windows启动界面 ↑ )</p>
<figure data-type="image" tabindex="2"><img src="https://fangminglee.github.io/post-images/1584775134895.webp" alt="" loading="lazy"></figure>
<p>( ↑ macOS启动界面 ↑ )</p>
<h2 id="2-配置项目">2 配置项目</h2>
<h3 id="21-配置eslint代码格式检查工具">2.1 配置ESLint代码格式检查工具</h3>
<p>ESlint可以高效的检查代码格式，让参与项目的所有工程师都能保持统一的代码风格。其检测精度甚至可以精确到是否多一个空格或者少一个空格。代码格式的统一对提高团队的协同开发效率有很大的帮助，特别是对有代码洁癖的工程师。</p>
<p>在项目根目录下创建.eslintrc.js （注意文件名前面有个“.”）</p>
<p>请粘贴以下代码：</p>
<pre><code>module.exports = {
  root: true,
  env: {
    node: true
  },
  'extends': [
    'plugin:vue/essential',
    '@vue/standard'
  ],
  rules: {
    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',
    // 不检测语句末尾的分号
    'semi': ['off', 'always'],
    // 强制缩进为2个空格
    'indent': ['error', 2],
    // 关闭函数名称跟括号之间的空格检测
    'space-before-function-paren': 0,
    // 忽略大括号内的空格
    'object-curly-spacing': 0
  },
  parserOptions: {
    parser: 'babel-eslint'
  }
}
复制代码
</code></pre>
<p>这里说明下关于indent缩进的配置，要配合项目根目录下的.editorconfig</p>
<pre><code>[*.{js,jsx,ts,tsx,vue}]
indent_style = space   &lt;--这里定义缩进类型是空格还是tab
indent_size = 2        &lt;--这里需要与.eslintrc.js的indent对应
trim_trailing_whitespace = true
insert_final_newline = true
复制代码
</code></pre>
<blockquote>
<p>.editorconfig 用于IDE自动格式化代码<br>
.eslintrc.js 用于ESlint检测</p>
</blockquote>
<p>以上是我常用的配置。如果你有更多的配置需求，可参阅： <a href="https://cloud.tencent.com/developer/doc/1078">cloud.tencent.com/developer/d…</a></p>
<h3 id="22-配置vue">2.2 配置vue</h3>
<p>在项目根目录下创建vue.config.js，粘贴以下代码：</p>
<pre><code>const path = require('path');

function resolve (dir) {
  return path.join(__dirname, dir);
}

module.exports = {
  publicPath: './',
  devServer: {
    // can be overwritten by process.env.HOST
    host: '0.0.0.0',  
    port: 8080
  },
  chainWebpack: config =&gt; {
    config.resolve.alias
      .set('@', resolve('src'))
      .set('src', resolve('src'))
      .set('common', resolve('src/common'))
      .set('components', resolve('src/components'));
  }
};
复制代码
</code></pre>
<p>devServer 用于设置开发环境的服务，这里表示在本地8080端口启动web服务。</p>
<p>chainWebpack 我们给项目目录起了“别名(alias)”，在代码中，我们可以直接用“别名”访问资源，省去了每次输入完整相对路径的麻烦。</p>
<blockquote>
<p>※注：<br>
◉ 在js代码中可直接使用别名，例如：<br>
@/common/js/xxx.js 等价于 src/common/js/xxx.js<br>
common/js/xxx.js 等价于 src/common/js/xxx.js<br>
◉ 在css或者html中使用别名，需要在别名前加“~”，例如：<br>
@import &quot;~common/stylus/font.styl&quot;;</p>
</blockquote>
<h2 id="3-项目基本设定">3 项目基本设定</h2>
<h3 id="31-主进程和渲染进程简介">3.1 主进程和渲染进程简介</h3>
<p>在开始下面的步骤之前，很有必要简单了解下Electron的应用架构。</p>
<h4 id="主进程">主进程</h4>
<p>Electron 运行 package.json 的 main 脚本（background.js）的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。</p>
<h4 id="渲染进程">渲染进程</h4>
<p>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。</p>
<p>在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。</p>
<h4 id="主进程与渲染进程的关系">主进程与渲染进程的关系</h4>
<p>主进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。</p>
<p>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p>
<p>具体可参阅官方文档： [electronjs.org/docs/tutori…](https://electronjs.org/docs/tutorial/application-architecture rel=)</p>
<h3 id="32-app窗口大小">3.2 APP窗口大小</h3>
<p>修改background.js：</p>
<pre><code>    function createWindow () {
      // Create the browser window.
      win = new BrowserWindow({
M       width: 1200,
M       height: 620,
        webPreferences: {
          nodeIntegration: true
        }
      })
复制代码
</code></pre>
<h3 id="33-取消跨域限制">3.3 取消跨域限制</h3>
<p>修改background.js：</p>
<pre><code>    function createWindow () {
      // Create the browser window.
      win = new BrowserWindow({
        width: 1200,
        height: 620,
        webPreferences: {
+         webSecurity: false,
          nodeIntegration: true
        }
      })
复制代码
</code></pre>
<h3 id="34-取消菜单栏">3.4 取消菜单栏</h3>
<p>在我们生成的桌面APP中，我们可以看到默认的菜单栏。</p>
<p>在windows中，菜单栏在APP窗口内的顶部；在macOS中，菜单栏位于电脑屏幕顶部。</p>
<p>为了方便项目将来也能直接生成纯web应用，尽量把APP的全部功能都做到渲染进程里，这里我们取消菜单栏。</p>
<p>由于macOS的特殊性，顶部菜单栏无法删除，所以我们针对macOS特殊处理，把菜单栏只保留“关于”和“退出”。</p>
<p>修改background.js：</p>
<pre><code>M   import { app, protocol, BrowserWindow, Menu } from 'electron'
    ...
    function createWindow () {
        ...
        win.on('closed', () =&gt; {
            win = null
        })
        
+       createMenu()
    }
    
+   // 设置菜单栏
+   function createMenu() {
+       // darwin表示macOS，针对macOS的设置
+       if (process.platform === 'darwin') {
+           const template = [
+           {
+               label: 'App Demo',
+               submenu: [
+                   {
+                       role: 'about'
+                   },
+                   {
+                       role: 'quit'
+                   }]
+           }]
+           let menu = Menu.buildFromTemplate(template)
+           Menu.setApplicationMenu(menu)
+       } else {
+           // windows及linux系统
+           Menu.setApplicationMenu(null)
+       }
+   }
复制代码
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://fangminglee.github.io/post-images/1584775231416.webp" alt="" loading="lazy"></figure>
<p>( ↑ windows界面菜单栏已消失 ↑)</p>
<figure data-type="image" tabindex="4"><img src="https://fangminglee.github.io/post-images/1584775260303.webp" alt="" loading="lazy"></figure>
<p>( ↑ macOS界面菜单栏已简化” ↑)</p>
<blockquote>
<p>macOS菜单栏名称label的“App Demo”会在build版本生效，dev版本会显示“Electron”</p>
</blockquote>
<p>更多关于菜单栏设置，请参阅：<a href="https://electronjs.org/docs/api/menu">electronjs.org/docs/api/me…</a></p>
<h3 id="35-设置app窗口图标">3.5 设置APP窗口图标</h3>
<p>准备windows和macOS两版图标。</p>
<blockquote>
<p>windows: app.ico 最小尺寸：256x256<br>
macOS: app.png或app.icns 最小尺寸：512x512 （后续4.1章节用到）</p>
</blockquote>
<p>把图标文件放到public/目录下，项目结构如下：</p>
<pre><code>|- /dist_electron
  （略）
|- /public
   |- app.icns  &lt;-- 本教程暂时未使用icns
   |- app.ico
   |- app.png
   |- favicon.ico
   |- index.html
|- /src
  （略）
|- .editorconfig    
|- .eslintrc.js
|- .gitignore
|- babel.config.js
|- package.json
|- package-lock.json
|- README.md
复制代码
</code></pre>
<p>可以顺便把favicon.ico也修改一下，但是在桌面版APP上是用不到的。如果以后生成纯web项目才会用到。</p>
<p>修改background.js，让APP窗口应用图标：</p>
<pre><code>    function createWindow () {
      // Create the browser window.
      win = new BrowserWindow({
        width: 1200,
        height: 620,
        webPreferences: {
          nodeIntegration: true
        },
+       // eslint-disable-next-line no-undef
+       icon: `${__static}/app.ico`
      })
复制代码
</code></pre>
<blockquote>
<p>这里的${__static}对应的是public目录</p>
</blockquote>
<p>现在，Windows系统上可以看到开发环境的APP窗口图标已经生效了。</p>
<p>macOS图标请参照4.1章节，并且需要在build后才能生效。</p>
<figure data-type="image" tabindex="5"><img src="https://fangminglee.github.io/post-images/1584775311843.webp" alt="" loading="lazy"></figure>
<p>( ↑ windows APP窗口及任务栏图标 ↑)</p>
<h3 id="36-设置app窗口标题栏名称">3.6 设置APP窗口标题栏名称</h3>
<p>修改public/index.html:</p>
<p>我们把electron-vue-demo改为App Demo。</p>
<pre><code>    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;
        &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;&gt;
M       &lt;title&gt;App Demo&lt;/title&gt;
  &lt;/head&gt;
复制代码
</code></pre>
<h2 id="4-build最终产品">4 build最终产品</h2>
<p>这里我们已经集成了electron-builder工具，官方文档可以参阅：<a href="https://www.electron.build/">www.electron.build/</a></p>
<h3 id="41-设置app及安装包图标">4.1 设置APP及安装包图标</h3>
<p>在3.5章节，我们的图标生效于运行APP的窗口。本小节将生效于最终生成的可执行文件和安装包图标。需要准备的图标文件请回看3.5章节。</p>
<p>修改vue.config.js</p>
<pre><code>    chainWebpack: config =&gt; {...},
+   pluginOptions: {
+       electronBuilder: {
+           builderOptions: {
+               win: {
+                   icon: './public/app.ico'
+               },
+               mac: {
+                   icon: './public/app.png'
+               }
+           }
+       }
+   }
    ...
复制代码
</code></pre>
<p>运行build后的mac版本，可以看到图标都已生效了。</p>
<figure data-type="image" tabindex="6"><img src="https://fangminglee.github.io/post-images/1584775356885.webp" alt="" loading="lazy"></figure>
<p>(↑ macOS APP Dock图标 ↑)</p>
<p>安装包和可执行文件的截图就不再放出了。</p>
<p>更多详细介绍，可参阅： <a href="https://www.electron.build/icons.html">www.electron.build/icons.html</a></p>
<h3 id="42-设置app名称">4.2 设置APP名称</h3>
<p>APP名称包括安装包中APP的名称、可执行文件的文件名。</p>
<p>修改vue.config.js:</p>
<pre><code>    pluginOptions: {
        electronBuilder: {
            builderOptions: {
                win: {
                    icon: './public/app.ico'
                },
                mac: {
                    icon: './public/app.png'
                },
+               productName: 'AppDemo'
            }
        }
    }
复制代码
</code></pre>
<h3 id="43-打包app">4.3 打包APP</h3>
<p>执行以下命令，可以build工程：</p>
<pre><code>npm run electron:build
复制代码
</code></pre>
<p>最终在dist_electron目录下生成build后的产品。</p>
<h4 id="windows版本">windows版本</h4>
<p>目录如下：</p>
<pre><code>/dist_electron
|- /bundled
  （略）
|- /win-unpacked  &lt;-- 绿色版
  （略）
|- AppDemo Setup 0.1.0.exe  &lt;-- 安装文件
|- AppDemo Setup 0.1.0.exe.blockmap
|- builder-effective-config.yaml
|- index.js
复制代码
</code></pre>
<p>这里其实就win-unpacked和AppDemo Setup 0.1.0.exe有用。</p>
<blockquote>
<p>※注：在32位环境下打包生成的是32位APP，在64位环境下打包生成的是64位APP。</p>
</blockquote>
<h4 id="mac版本">mac版本</h4>
<pre><code>/dist_electron
|- /bundled
  （略）
|- /mac
   |- AppDemo   &lt;-- 绿色版
|- AppDemo-0.1.0-mac.zip  &lt;-- 绿色版压缩包
|- AppDemo-0.1.0-mac.dmg  &lt;-- 安装包
|- AppDemo-0.1.0.dmg.blockmap
|- builder-effective-config.yaml
|- index.js
复制代码
</code></pre>
<h3 id="44-可能出现的错误">4.4 可能出现的错误</h3>
<p>我曾经在Win10 64bit 1809版本上build失败，保存信息中提示：</p>
<pre><code>Error output:
Can't open output file
Error - aborting creation process
复制代码
</code></pre>
<p>与此同时，在win7和win10 1803版本build正常。经研究，无果。后来把windows升级到1903版本，问题解决了。应该是vue-cli-plugin-electron-builder插件与系统之间的问题导致。</p>
<h2 id="5-关于项目开发的一些经验">5 关于项目开发的一些经验</h2>
<p>在完成以上章节后，后面基本可以完全按照web方式开发了。这里简单分享下一些小经验。</p>
<h3 id="51-src目录结构参考">5.1 src目录结构参考</h3>
<pre><code>/src
|- /common
   |- /fonts
   |- /images
   |- /js
      |- api
      |- libs
   |- /stylus
   |- /components
   |- /base
   |- /modules
      |- /moduleA
      |- /moduleB
      ...
   |- /views
   |- App.vue
   |- background.js
   |- main.js
   |- router.js
   |- store.js
复制代码
</code></pre>
<p>下面对部分重要目录简要说明：</p>
<pre><code>common/ - 项目公用库
common/fonts/ - 字体文件
common/images/ - 公用图片
common/js/ - 公用js目录
common/js/api/ - 把api按类别封装成函数，并export出去，减少业务逻辑中的重复代码
common/js/lib/ - 存放一些公用函数库、定义的常量库等
common/stylus/ - Stylus样式文件
components/ - vue组件目录
component/base/ - vue基础组件，例如自定义的CheckBox、日期选择器、Dialog、Toaster、分页组件等
component/modules/ - vue模块
views/ - vue页面
复制代码
</code></pre>
<h3 id="52-换肤功能的实现">5.2 换肤功能的实现</h3>
<p>很多项目都有实时换肤的需求，在实际开发中，虽然我们使用了Sass、Less、Stylus等高端样式工具，但最终经过编译还是要回归到最原始的CSS。换肤的本质还是实时替换皮肤样式文件。</p>
<h4 id="失败案例">失败案例</h4>
<p>以Stylus为例，抽象出皮肤文件skin.styl:</p>
<pre><code>$color-bg = #fff
$color-text = #333
复制代码
</code></pre>
<p>在业务样式中引用：</p>
<pre><code>@import 'skin.styl'

body
 background: $color-bg
 color: $color-text
复制代码
</code></pre>
<p>当经过编译后，生成的css为：</p>
<pre><code>body {background: #fff; color: #333;}
复制代码
</code></pre>
<p>样式已经写死了，无法换肤。</p>
<p>那么应该怎么做呢？</p>
<h4 id="成功案例">成功案例</h4>
<p>项目根目录下的public目录是静态目录，也就是说在build最终产品的时候，它里面的文件将原封不动保留。所以，可以将皮肤文件放在这里。</p>
<pre><code>|- /public
+  |- /skin
+     |- /skin01
+        |- skin.css
+     |- /skin02
+        |- skin.css     
   |- app.icns
   |- app.ico
   |- app.png
   |- favicon.ico
   |- index.html

复制代码
</code></pre>
<p>由于Electron的是基于chromium内核，所以不用担心代码的浏览器兼容问题。接下来就是发挥CSS3变量var(--*)的时候了。</p>
<p>public/skin/skin01/skin.css：</p>
<pre><code>:root {
    --color-bg: #fff;
    --color-text: #333;
}
复制代码
</code></pre>
<p>public/skin/skin02/skin.css：</p>
<pre><code>:root {
    --color-bg: #263238;
    --color-text: #b2ccd6;
}
复制代码
</code></pre>
<p>修改src/App.vue：</p>
<pre><code>    ...
    &lt;style lang=&quot;stylus&quot;&gt;
+   body
+     background: var(--color-bg)
+     color: var(--color-text)
    #app
      font-family 'Avenir', Helvetica, Arial, sans-serif
      -webkit-font-smoothing antialiased
      -moz-osx-font-smoothing grayscale
      text-align center
M     color: var(--color-text)
    
    #nav
      padding 30px
      a
        font-weight bold
M       color: var(--color-text)
        &amp;.router-link-exact-active
          color #42b983
    &lt;/style&gt;
复制代码
</code></pre>
<p>在public/index.html引入皮肤样式，注意加上id=&quot;app-skin&quot;：</p>
<pre><code>    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;
        &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;&gt;
+       &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= BASE_URL %&gt;skin/skin01/skin.css&quot; id=&quot;app-skin&quot;&gt;
        &lt;title&gt;App Demo&lt;/title&gt;
  &lt;/head&gt;
复制代码
</code></pre>
<p>篇幅有限，这里就不写通过js修改皮肤的代码了。通过调试工具手动修改skin的css路径，可看到换肤效果：</p>
<figure data-type="image" tabindex="7"><img src="https://fangminglee.github.io/post-images/1584775411338.webp" alt="" loading="lazy"></figure>
<p>( ↑ skin01浅色皮肤 ↑)</p>
<figure data-type="image" tabindex="8"><img src="https://fangminglee.github.io/post-images/1584775422906.webp" alt="" loading="lazy"></figure>
<p>( ↑ skin02深色皮肤 ↑)</p>
<h3 id="53-从electron4x升级到5x">5.3 从Electron4.x升级到5.x</h3>
<p>如果你之前用的是Electron4.x，升级到5.x很简单。</p>
<p>修改package.json中electron的版本(写作本文时是5.0.6)：</p>
<pre><code>    ...
M   &quot;electron&quot;: &quot;^5.0.6&quot;,
    ...
复制代码
</code></pre>
<p>修改background.js中的这部分：</p>
<pre><code>// Scheme must be registered before the app is ready
// Electron 4.x代码
// protocol.registerStandardSchemes(['app'], {secure: true})
// Electron 5.x代码
protocol.registerSchemesAsPrivileged([{
  scheme: 'app',
  privileges: {
    secure: true,
    standard: true
  }
}])
复制代码
</code></pre>
<p>然后执行，等待升级安装完成：</p>
<pre><code>cnpm install
复制代码
</code></pre>
<p>以上就是 Electron5 + vue-cli3 的构建跨平台应用的全部分享内容。如果有其他问题，欢迎一起交流。</p>
<h3 id="54-注册快捷键打开devtools">5.4 注册快捷键打开devTools</h3>
<p>在Electron中打开devTools是通过主线程中调用win.webContents.openDevTools()实现的。以上教程仅在开发环境初始启动的时候打开devTools，但是一旦关闭就不能再打开了。下面讲一下怎么通过快捷键打开devTools。</p>
<p>修改background.js:</p>
<pre><code>...
M   import { app, protocol, BrowserWindow, Menu, globalShortcut } from 'electron'
    ...
    app.on('ready', async () =&gt; {
        if (isDevelopment &amp;&amp; !process.env.IS_TEST) {
        // Install Vue Devtools
            try {
                await installVueDevtools()
            } catch (e) {
                console.error('Vue Devtools failed to install:', e.toString())
            }
        }
        // 在开发环境和生产环境均可通过快捷键打开devTools
+       globalShortcut.register('CommandOrControl+Shift+i', function () {
+           win.webContents.openDevTools()
+       })
        createWindow()
})    
复制代码
</code></pre>
<p>在windows下，按Ctrl+Shift+i即可打开devTools</p>
<p>在macOS下，按Commond+Shift+i即可打开devTools</p>
<p>为什么没用F12？因为windows系统中，F12是系统保留快捷键，无法使用。官方原话是这么解释的：</p>
<blockquote>
<p>The F12 key is reserved for use by the debugger at all times, so it should not be registered as a hot key. Even when you are not debugging an application, F12 is reserved in case a kernel-mode debugger or a just-in-time debugger is resident.</p>
</blockquote>
<p>但是可以使用Ctrl+F12，只要不单独使用F12就可以。</p>
<p>以上代码在开发环境和生产环境中均有效，为保证生产环境的安全，建议不要在生产环境中使用。放到上面的if语句中即可。</p>
]]></content>
    </entry>
</feed>